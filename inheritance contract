pragma solidity ^0.4.0;
contract Owned
{
address public creator;

function Owned () public
{
creator = msg.sender;
}

modifier onlyOwner                        //the one who validate/verifies will be owner only
{
require(msg.sender == creator);
_;         //proceed with the method
}
}

contract Instructor is Owned           // inheritance
{

struct instructor
{
string fname;
string lname;
uint age;
}

mapping (address => instructor) instructorMap;
address[] public instructorAddr;

function instructor() public
{
creator = msg.sender;
}

function setInstructor(address _address, string _fname, string _lname, uint _age) public onlyOwner
{
var Instructor = instructorMap[_address];
Instructor.fname = _fname;
Instructor.lname = _lname;
Instructor.age = _age;

instructorAddr.push(_address);
}
function getInstructorAddr() public returns(address[])
{
return instructorAddr;
}
function getInstructor(address _address) public returns(string,string,uint)
{
return(instructorMap[_address].fname,instructorMap[_address].lname,instructorMap[_address].age)
}
}























